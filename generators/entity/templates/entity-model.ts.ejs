<%
const variablesWithTypes = generateEntityClientFields(primaryKey, fields, relationships, dto, 'string', embedded);
const typeImports = generateEntityClientImports(relationships, dto);
const defaultVariablesValues = generateEntityClientFieldDefaultValues(fields.filter(field => !field.id), 'react');
const enumImports = generateEntityClientEnumImports(fields.filter(field => !field.id));
%>
<%_ if (fieldsContainInstant || fieldsContainZonedDateTime || fieldsContainLocalDate) { _%>
import dayjs from 'dayjs';
<%_ } _%>
<%_ typeImports.forEach( (importedPath, importedType) => { _%>
<%_ if (importedType !== `I${entityReactName}`) { _%>
    import { <%- importedType %> } from '<%- importedPath %>';
<%_ } _%>
<%_ }); _%>
<%_ enumImports.forEach( (importedPath, importedType) => { _%>
    import { <%- importedType %> } from '<%- importedPath %>';
<%_ }); _%>

export interface I<%= entityReactName %> {
<%_ variablesWithTypes.forEach(variablesWithType => { _%>
    <%- variablesWithType %>;
<%_ }); _%>
}

export const defaultValue:  Readonly<I<%= entityReactName %>> = {
    <% for (idx in defaultVariablesValues) { %><%- defaultVariablesValues[idx] %><% } %>
    };
